//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseServiceReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Schema", Namespace="http://schemas.datacontract.org/2004/07/DatabaseServer")]
    public partial class Schema : object
    {
        
        private DatabaseServiceReference.Field[] FieldsField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseServiceReference.Field[] Fields
        {
            get
            {
                return this.FieldsField;
            }
            set
            {
                this.FieldsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Field", Namespace="http://schemas.datacontract.org/2004/07/DatabaseServer")]
    public partial class Field : object
    {
        
        private System.Nullable<System.TimeSpan> LowerBoundField;
        
        private string NameField;
        
        private string TypeField;
        
        private System.Nullable<System.TimeSpan> UpperBoundField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.TimeSpan> LowerBound
        {
            get
            {
                return this.LowerBoundField;
            }
            set
            {
                this.LowerBoundField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.TimeSpan> UpperBound
        {
            get
            {
                return this.UpperBoundField;
            }
            set
            {
                this.UpperBoundField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Database", Namespace="http://schemas.datacontract.org/2004/07/DatabaseServer")]
    public partial class Database : object
    {
        
        private string NameField;
        
        private DatabaseServiceReference.Schema[] SchemasField;
        
        private DatabaseServiceReference.Table[] TablesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseServiceReference.Schema[] Schemas
        {
            get
            {
                return this.SchemasField;
            }
            set
            {
                this.SchemasField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseServiceReference.Table[] Tables
        {
            get
            {
                return this.TablesField;
            }
            set
            {
                this.TablesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Table", Namespace="http://schemas.datacontract.org/2004/07/DatabaseServer")]
    public partial class Table : object
    {
        
        private string NameField;
        
        private DatabaseServiceReference.Row[] RowsField;
        
        private DatabaseServiceReference.Schema SchemaField;
        
        private int _nextIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseServiceReference.Row[] Rows
        {
            get
            {
                return this.RowsField;
            }
            set
            {
                this.RowsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseServiceReference.Schema Schema
        {
            get
            {
                return this.SchemaField;
            }
            set
            {
                this.SchemaField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int _nextId
        {
            get
            {
                return this._nextIdField;
            }
            set
            {
                this._nextIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Row", Namespace="http://schemas.datacontract.org/2004/07/DatabaseServer")]
    public partial class Row : object
    {
        
        private DatabaseServiceReference.Value[] ValuesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseServiceReference.Value[] Values
        {
            get
            {
                return this.ValuesField;
            }
            set
            {
                this.ValuesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Value", Namespace="http://schemas.datacontract.org/2004/07/DatabaseServer")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseServiceReference.Schema[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseServiceReference.Schema))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseServiceReference.Field[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseServiceReference.Field))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseServiceReference.Database))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseServiceReference.Table[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseServiceReference.Table))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseServiceReference.Row[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseServiceReference.Row))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseServiceReference.Value[]))]
    public partial class Value : object
    {
        
        private object FieldValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object FieldValue
        {
            get
            {
                return this.FieldValueField;
            }
            set
            {
                this.FieldValueField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DatabaseServiceReference.IDatabaseService")]
    public interface IDatabaseService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetSchemas", ReplyAction="http://tempuri.org/IDatabaseService/GetSchemasResponse")]
        System.Threading.Tasks.Task<DatabaseServiceReference.Schema[]> GetSchemasAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/AddSchema", ReplyAction="http://tempuri.org/IDatabaseService/AddSchemaResponse")]
        System.Threading.Tasks.Task<DatabaseServiceReference.Database> AddSchemaAsync(DatabaseServiceReference.Database db, DatabaseServiceReference.Schema schema);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/AddSchema2", ReplyAction="http://tempuri.org/IDatabaseService/AddSchema2Response")]
        System.Threading.Tasks.Task<string> AddSchema2Async(string db, DatabaseServiceReference.Schema schema);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetRows", ReplyAction="http://tempuri.org/IDatabaseService/GetRowsResponse")]
        System.Threading.Tasks.Task<DatabaseServiceReference.Row[]> GetRowsAsync(string TableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/AddRow", ReplyAction="http://tempuri.org/IDatabaseService/AddRowResponse")]
        System.Threading.Tasks.Task<DatabaseServiceReference.Database> AddRowAsync(DatabaseServiceReference.Database db, string TableName, DatabaseServiceReference.Row row);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/AddRow2", ReplyAction="http://tempuri.org/IDatabaseService/AddRow2Response")]
        System.Threading.Tasks.Task<string> AddRow2Async(string db2, string tableName, DatabaseServiceReference.Row row);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/UpdateRow", ReplyAction="http://tempuri.org/IDatabaseService/UpdateRowResponse")]
        System.Threading.Tasks.Task UpdateRowAsync(DatabaseServiceReference.Database db, string TableName, int rowId, DatabaseServiceReference.Row updatedRow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/DeleteRow", ReplyAction="http://tempuri.org/IDatabaseService/DeleteRowResponse")]
        System.Threading.Tasks.Task<DatabaseServiceReference.Database> DeleteRowAsync(DatabaseServiceReference.Database db, string TableName, int rowId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/DeleteRow2", ReplyAction="http://tempuri.org/IDatabaseService/DeleteRow2Response")]
        System.Threading.Tasks.Task<string> DeleteRow2Async(string db2, string TableName, int rowId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/ValidateValue", ReplyAction="http://tempuri.org/IDatabaseService/ValidateValueResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DatabaseServiceReference.Schema[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DatabaseServiceReference.Schema))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DatabaseServiceReference.Field[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DatabaseServiceReference.Field))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DatabaseServiceReference.Database))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DatabaseServiceReference.Table[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DatabaseServiceReference.Table))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DatabaseServiceReference.Row[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DatabaseServiceReference.Row))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DatabaseServiceReference.Value[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DatabaseServiceReference.Value))]
        System.Threading.Tasks.Task<bool> ValidateValueAsync(object value, string fieldType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/CreateDatabase", ReplyAction="http://tempuri.org/IDatabaseService/CreateDatabaseResponse")]
        System.Threading.Tasks.Task<DatabaseServiceReference.Database> CreateDatabaseAsync(string databaseName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/DatabaseExists", ReplyAction="http://tempuri.org/IDatabaseService/DatabaseExistsResponse")]
        System.Threading.Tasks.Task<bool> DatabaseExistsAsync(string databaseName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/LoadDatabase", ReplyAction="http://tempuri.org/IDatabaseService/LoadDatabaseResponse")]
        System.Threading.Tasks.Task<DatabaseServiceReference.Database> LoadDatabaseAsync(string filePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/LoadDatabase2", ReplyAction="http://tempuri.org/IDatabaseService/LoadDatabase2Response")]
        System.Threading.Tasks.Task<string> LoadDatabase2Async(string filePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetTableDifference", ReplyAction="http://tempuri.org/IDatabaseService/GetTableDifferenceResponse")]
        System.Threading.Tasks.Task<DatabaseServiceReference.Table> GetTableDifferenceAsync(DatabaseServiceReference.Database db, string tableName1, string tableName2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetTableDifference2", ReplyAction="http://tempuri.org/IDatabaseService/GetTableDifference2Response")]
        System.Threading.Tasks.Task<string> GetTableDifference2Async(string db, string tableName1, string tableName2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/AddTable", ReplyAction="http://tempuri.org/IDatabaseService/AddTableResponse")]
        System.Threading.Tasks.Task<DatabaseServiceReference.Database> AddTableAsync(DatabaseServiceReference.Database db, string tableName, DatabaseServiceReference.Table table);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/AddTable2", ReplyAction="http://tempuri.org/IDatabaseService/AddTable2Response")]
        System.Threading.Tasks.Task<string> AddTable2Async(string db, string tableName, string table);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/DeleteTable", ReplyAction="http://tempuri.org/IDatabaseService/DeleteTableResponse")]
        System.Threading.Tasks.Task<DatabaseServiceReference.Database> DeleteTableAsync(DatabaseServiceReference.Database db, string tableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/DeleteTable2", ReplyAction="http://tempuri.org/IDatabaseService/DeleteTable2Response")]
        System.Threading.Tasks.Task<string> DeleteTable2Async(string db, string tableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/SaveDatabase", ReplyAction="http://tempuri.org/IDatabaseService/SaveDatabaseResponse")]
        System.Threading.Tasks.Task SaveDatabaseAsync(DatabaseServiceReference.Database db, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/SaveDatabase2", ReplyAction="http://tempuri.org/IDatabaseService/SaveDatabase2Response")]
        System.Threading.Tasks.Task SaveDatabase2Async(string db, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/CreateTable", ReplyAction="http://tempuri.org/IDatabaseService/CreateTableResponse")]
        System.Threading.Tasks.Task<DatabaseServiceReference.Database> CreateTableAsync(DatabaseServiceReference.Database db, string name, DatabaseServiceReference.Schema schema);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/CreateTable2", ReplyAction="http://tempuri.org/IDatabaseService/CreateTable2Response")]
        System.Threading.Tasks.Task<string> CreateTable2Async(string db, string name, DatabaseServiceReference.Schema schema);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetTable", ReplyAction="http://tempuri.org/IDatabaseService/GetTableResponse")]
        System.Threading.Tasks.Task<DatabaseServiceReference.Table> GetTableAsync(DatabaseServiceReference.Database db, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetTable2", ReplyAction="http://tempuri.org/IDatabaseService/GetTable2Response")]
        System.Threading.Tasks.Task<string> GetTable2Async(string db, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetSchemaByName", ReplyAction="http://tempuri.org/IDatabaseService/GetSchemaByNameResponse")]
        System.Threading.Tasks.Task<DatabaseServiceReference.Schema> GetSchemaByNameAsync(DatabaseServiceReference.Database db, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetSchemaByName2", ReplyAction="http://tempuri.org/IDatabaseService/GetSchemaByName2Response")]
        System.Threading.Tasks.Task<string> GetSchemaByName2Async(string db, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/ToInt", ReplyAction="http://tempuri.org/IDatabaseService/ToIntResponse")]
        System.Threading.Tasks.Task<int> ToIntAsync(DatabaseServiceReference.Value value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/ToInt2", ReplyAction="http://tempuri.org/IDatabaseService/ToInt2Response")]
        System.Threading.Tasks.Task<int> ToInt2Async(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/CountV", ReplyAction="http://tempuri.org/IDatabaseService/CountVResponse")]
        System.Threading.Tasks.Task<int> CountVAsync(DatabaseServiceReference.Value[] values);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/CountV2", ReplyAction="http://tempuri.org/IDatabaseService/CountV2Response")]
        System.Threading.Tasks.Task<int> CountV2Async(string values);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IDatabaseServiceChannel : DatabaseServiceReference.IDatabaseService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class DatabaseServiceClient : System.ServiceModel.ClientBase<DatabaseServiceReference.IDatabaseService>, DatabaseServiceReference.IDatabaseService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DatabaseServiceClient() : 
                base(DatabaseServiceClient.GetDefaultBinding(), DatabaseServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IDatabaseService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DatabaseServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(DatabaseServiceClient.GetBindingForEndpoint(endpointConfiguration), DatabaseServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DatabaseServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DatabaseServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DatabaseServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DatabaseServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DatabaseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<DatabaseServiceReference.Schema[]> GetSchemasAsync()
        {
            return base.Channel.GetSchemasAsync();
        }
        
        public System.Threading.Tasks.Task<DatabaseServiceReference.Database> AddSchemaAsync(DatabaseServiceReference.Database db, DatabaseServiceReference.Schema schema)
        {
            return base.Channel.AddSchemaAsync(db, schema);
        }
        
        public System.Threading.Tasks.Task<string> AddSchema2Async(string db, DatabaseServiceReference.Schema schema)
        {
            return base.Channel.AddSchema2Async(db, schema);
        }
        
        public System.Threading.Tasks.Task<DatabaseServiceReference.Row[]> GetRowsAsync(string TableName)
        {
            return base.Channel.GetRowsAsync(TableName);
        }
        
        public System.Threading.Tasks.Task<DatabaseServiceReference.Database> AddRowAsync(DatabaseServiceReference.Database db, string TableName, DatabaseServiceReference.Row row)
        {
            return base.Channel.AddRowAsync(db, TableName, row);
        }
        
        public System.Threading.Tasks.Task<string> AddRow2Async(string db2, string tableName, DatabaseServiceReference.Row row)
        {
            return base.Channel.AddRow2Async(db2, tableName, row);
        }
        
        public System.Threading.Tasks.Task UpdateRowAsync(DatabaseServiceReference.Database db, string TableName, int rowId, DatabaseServiceReference.Row updatedRow)
        {
            return base.Channel.UpdateRowAsync(db, TableName, rowId, updatedRow);
        }
        
        public System.Threading.Tasks.Task<DatabaseServiceReference.Database> DeleteRowAsync(DatabaseServiceReference.Database db, string TableName, int rowId)
        {
            return base.Channel.DeleteRowAsync(db, TableName, rowId);
        }
        
        public System.Threading.Tasks.Task<string> DeleteRow2Async(string db2, string TableName, int rowId)
        {
            return base.Channel.DeleteRow2Async(db2, TableName, rowId);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateValueAsync(object value, string fieldType)
        {
            return base.Channel.ValidateValueAsync(value, fieldType);
        }
        
        public System.Threading.Tasks.Task<DatabaseServiceReference.Database> CreateDatabaseAsync(string databaseName)
        {
            return base.Channel.CreateDatabaseAsync(databaseName);
        }
        
        public System.Threading.Tasks.Task<bool> DatabaseExistsAsync(string databaseName)
        {
            return base.Channel.DatabaseExistsAsync(databaseName);
        }
        
        public System.Threading.Tasks.Task<DatabaseServiceReference.Database> LoadDatabaseAsync(string filePath)
        {
            return base.Channel.LoadDatabaseAsync(filePath);
        }
        
        public System.Threading.Tasks.Task<string> LoadDatabase2Async(string filePath)
        {
            return base.Channel.LoadDatabase2Async(filePath);
        }
        
        public System.Threading.Tasks.Task<DatabaseServiceReference.Table> GetTableDifferenceAsync(DatabaseServiceReference.Database db, string tableName1, string tableName2)
        {
            return base.Channel.GetTableDifferenceAsync(db, tableName1, tableName2);
        }
        
        public System.Threading.Tasks.Task<string> GetTableDifference2Async(string db, string tableName1, string tableName2)
        {
            return base.Channel.GetTableDifference2Async(db, tableName1, tableName2);
        }
        
        public System.Threading.Tasks.Task<DatabaseServiceReference.Database> AddTableAsync(DatabaseServiceReference.Database db, string tableName, DatabaseServiceReference.Table table)
        {
            return base.Channel.AddTableAsync(db, tableName, table);
        }
        
        public System.Threading.Tasks.Task<string> AddTable2Async(string db, string tableName, string table)
        {
            return base.Channel.AddTable2Async(db, tableName, table);
        }
        
        public System.Threading.Tasks.Task<DatabaseServiceReference.Database> DeleteTableAsync(DatabaseServiceReference.Database db, string tableName)
        {
            return base.Channel.DeleteTableAsync(db, tableName);
        }
        
        public System.Threading.Tasks.Task<string> DeleteTable2Async(string db, string tableName)
        {
            return base.Channel.DeleteTable2Async(db, tableName);
        }
        
        public System.Threading.Tasks.Task SaveDatabaseAsync(DatabaseServiceReference.Database db, string fileName)
        {
            return base.Channel.SaveDatabaseAsync(db, fileName);
        }
        
        public System.Threading.Tasks.Task SaveDatabase2Async(string db, string fileName)
        {
            return base.Channel.SaveDatabase2Async(db, fileName);
        }
        
        public System.Threading.Tasks.Task<DatabaseServiceReference.Database> CreateTableAsync(DatabaseServiceReference.Database db, string name, DatabaseServiceReference.Schema schema)
        {
            return base.Channel.CreateTableAsync(db, name, schema);
        }
        
        public System.Threading.Tasks.Task<string> CreateTable2Async(string db, string name, DatabaseServiceReference.Schema schema)
        {
            return base.Channel.CreateTable2Async(db, name, schema);
        }
        
        public System.Threading.Tasks.Task<DatabaseServiceReference.Table> GetTableAsync(DatabaseServiceReference.Database db, string name)
        {
            return base.Channel.GetTableAsync(db, name);
        }
        
        public System.Threading.Tasks.Task<string> GetTable2Async(string db, string name)
        {
            return base.Channel.GetTable2Async(db, name);
        }
        
        public System.Threading.Tasks.Task<DatabaseServiceReference.Schema> GetSchemaByNameAsync(DatabaseServiceReference.Database db, string name)
        {
            return base.Channel.GetSchemaByNameAsync(db, name);
        }
        
        public System.Threading.Tasks.Task<string> GetSchemaByName2Async(string db, string name)
        {
            return base.Channel.GetSchemaByName2Async(db, name);
        }
        
        public System.Threading.Tasks.Task<int> ToIntAsync(DatabaseServiceReference.Value value)
        {
            return base.Channel.ToIntAsync(value);
        }
        
        public System.Threading.Tasks.Task<int> ToInt2Async(string value)
        {
            return base.Channel.ToInt2Async(value);
        }
        
        public System.Threading.Tasks.Task<int> CountVAsync(DatabaseServiceReference.Value[] values)
        {
            return base.Channel.CountVAsync(values);
        }
        
        public System.Threading.Tasks.Task<int> CountV2Async(string values)
        {
            return base.Channel.CountV2Async(values);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDatabaseService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDatabaseService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:53391/DatabaseService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return DatabaseServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IDatabaseService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return DatabaseServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IDatabaseService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IDatabaseService,
        }
    }
}
